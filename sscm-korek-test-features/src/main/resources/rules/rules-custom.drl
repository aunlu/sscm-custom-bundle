/*
 * Copyright 2012 Red Hat
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */


package com.ericsson.sscm.esb.rules;

import com.ericsson.sscm.esb.model.data.Request;
import com.ericsson.sscm.esb.model.data.Attribute;
import com.ericsson.sscm.esb.model.data.AbstractInOut;
import com.ericsson.sscm.esb.constants.CommonConstants;
import com.ericsson.sscm.esb.model.data.StatusValue;

import com.ericsson.sscm.esb.model.data.Response;
import com.ericsson.sscm.esb.model.data.NodeResponse;
import com.ericsson.sscm.esb.model.data.Criteria;

global org.slf4j.Logger logger;

import java.io.StringReader;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonElement;

import com.ericsson.sscm.esb.model.data.JsonUtil;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import com.ericsson.sscm.esb.common.util.DateUtils;
import java.text.SimpleDateFormat;

import com.ericsson.sscm.esb.model.data.FulfillmentState;
import com.ericsson.sscm.esb.exceptions.*;

import function com.ericsson.sscm.esb.rules.beans.PropertyReader.getProperty;

rule "fulfillService_updateServiceClass"
    when
        $request : Request( flowName == "fulfillService", $profile:nodeRequest.get("serviceprofile").toString())
        Request( getProperty($profile).equals("CustomKorekTestOutboundService") == true)
        Request( $request.isVisited ("SscmAirService", "setSubscriberData") == false)
        Request( $request.getNodeRequest().getAttributeStartsWithName("SC_NEW_DEPROV").isEmpty() == false)
    then
        $request.setNextOperation("setSubscriberData");
		logger.debug("nextOperation:updateForNewServiceClass");
end

rule "fulfillService_updateForRemoveServiceClass"
    when
        $request : Request( flowName == "fulfillService", nextOperation == "updateForRemoveServiceClass", $profile:nodeRequest.get("serviceprofile").toString())
        Request( getProperty($profile).equals("SscmAirService") == true)
        Request( $request.getNodeRequest().getAttributeStartsWithName("SC_NEW_DEPROV").isEmpty() == false)
    then
        $request.setNextOperation(CommonConstants.FINISH);
		logger.debug("nextOperation:Finish");
end