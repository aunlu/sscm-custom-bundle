/*
 * Copyright 2012 Red Hat
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */


package com.ericsson.sscm.esb.rules;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import com.ericsson.sscm.esb.model.data.ActionType;
import com.ericsson.sscm.esb.model.data.Attribute;
import com.ericsson.sscm.esb.model.data.Request;
import com.ericsson.sscm.esb.constants.AirInternalConstants;

import java.util.Date;
import java.util.Calendar;
import java.util.Properties;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.ericsson.sscm.esb.model.data.JsonUtil;
import com.ericsson.sscm.esb.model.data.AbstractInOut;
import com.ericsson.sscm.esb.constants.CommonConstants;
import com.ericsson.sscm.esb.model.data.Response;
import com.ericsson.sscm.esb.model.data.NodeResponse;
import com.ericsson.sscm.esb.model.data.Criteria;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import com.ericsson.sscm.esb.exceptions.*;

import java.math.BigInteger;

global org.slf4j.Logger logger;

/*Add destinationNumber*/
rule "KorekFaFTransformRule"
        when
        $request : Request( nextNodeIdentifier == "CustomKorekOutboundService",
                            nextOperation == "checkActiveSubscriptionForFaF" ,
                            isTransformed ( "CustomKorekOutboundService" ,"checkActiveSubscriptionForFaF" ) == false )
    then
        Attribute destinationNum = $request.getNodeRequest().getAttributeByName("DESTINATION_NUMBER");
        $request.getNodeRequest().add("destinationNumber",destinationNum);
        logger.info("destinationNumber is {}", destinationNum.getValue());

end


/*Add cancellationChannel and cancellationType*/
rule "KorekLastFaFNoTransformRule"
        when
        $request : Request( nextNodeIdentifier == "SscmCoreService",
                            nextOperation == "subscriptionCancel" ,
                            isTransformed ( "SscmCoreService" ,"subscriptionCancel" ) == false )
        Request( ($request.getNodeRequest().getAttributeByName("last_faf_no") != null) == true )
    then
        String requestChannel = $request.getNodeRequest().get("requestChannel");
        $request.getNodeRequest().add("cancellationChannel", requestChannel);
        $request.getNodeRequest().add("cancellationType",1);
        logger.info("cancellationChannelis {} internal_faf");

end


/* Basra cancel transform rule */
rule "KorekBasraCancelRemoveCampaignRule"
    when
        $request : Request( flowName == "subscriptionCancel" )
        Request(  nextNodeIdentifier == "SscmCoreService", nextOperation == "subscriptionCancel" , isTransformed ( "SscmCoreService" ,"subscriptionCancel" ) == false )
    then
        Object externalOfferId = $request.getNodeRequest().get("externalOfferId");
        if ( externalOfferId != null ){
            if ( externalOfferId.toString().contains("Basra") ){
                $request.getNodeRequest().add("campaignId",null);
                logger.info("cancellation Campaign is nullified ");
            }
        }
end

/*
   Custom Retrieve Subscriptions Tranform rule for Korek derived from base cause base rule wont be triggered.
*/
rule "KorekTransfromRetrieveEligibilityProfiles"
    when
        $request : Request(
            flowName == "retrieveSubscriptions",
            nextNodeIdentifier == "SscmCoreService", nextOperation == "retrieveEligibilityProfiles" ,
            isTransformed ("retrieveEligibilityProfiles" ) == false )
    then


        List<String> dataOfferGroups = $request.getNodeRequest().get("retrieveDataOfferGroups");

        if ( dataOfferGroups != null && dataOfferGroups.size() > 0 ){

            /* Get params to call eligiblity of first DATA_OFFER_GROUP value */
            String currentDataOfferGroup = dataOfferGroups.get(0);

            boolean found = false ;
            for (JsonElement subscriptionElement : $request.getLastResponse().getNodeResponse().get("/subscriptionretrieveresponse/subscriptions/subscription", JsonArray.class,null) ){

                if (found == false){

                    JsonObject subscription = subscriptionElement.getAsJsonObject();
                    JsonArray offerattributes = subscription.get("offerattributes").getAsJsonObject().getAsJsonArray("attribute");

                    if (  offerattributes != null ){
                        for (JsonElement je : offerattributes){
                            if ( found == false ){
                                JsonObject jo = je.getAsJsonObject() ;
                                if ( jo.get("name").getAsString().equals("DATA_OFFER_GROUP") ){
                                    if ( jo.get("value").getAsString().equals(currentDataOfferGroup) ){
                                        found = true;
                                        String esdpOfferId = subscription.get("esdpofferid").getAsString();
                                        String campaingId =  subscription.get("currentcampaignid").getAsString();
                                        String requestChannel = subscription.get("subscribingchannel").getAsString();
                                        String lifeCycle = subscription.get("lifecyclepolicyid").getAsString();
                                        String msisdn = (String) $request.getLastResponse().getNodeResponse().get("/originalmessage/msisdn");
                                        $request.getNodeRequest().add("esdpofferid", esdpOfferId);
                                        $request.getNodeRequest().add("campaignId", campaingId);
                                        $request.getNodeRequest().add("requestChannel", requestChannel);
                                        $request.getNodeRequest().add("lifecyclePolicy", lifeCycle);
                                        $request.getNodeRequest().add("msisdn", msisdn);
	
                                        /* Update the values, so that we can continue with the next one */
                                        dataOfferGroups.remove(0);
                                        $request.getNodeRequest().add("retrieveDataOfferGroups", dataOfferGroups);
                                        $request.getNodeRequest().add("currentDataOfferGroup",currentDataOfferGroup);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

end


rule "KorekDataAfterRetrieveAggregate"
    when
        $request : Request( flowName == "retrieveSubscriptions",
                            isLastOperation("retrieveSubscriptions") == true )
        Request( $request.getNodeRequest().get("enhancedretrieveoption/balance") == 1 ||
                 $request.getNodeRequest().get("enhancedretrieveoption/query") == 1   ||
                 $request.getNodeRequest().get("enhancedretrieveoption/quota") == 1 )
        Request( $request.getNodeRequest().get("retrieveEnriched") == true  )
    then

            Map offerMap = new HashMap();

            SimpleDateFormat sscmFormat = new SimpleDateFormat("yyyyMMddHHmmss");

            for (JsonElement sss :
                    $request.getLastResponse().getNodeResponse().get("subscriptionretrieveresponse/subscriptions/subscription", JsonArray.class, null)) {

                for (JsonElement subscriptionElement : sss.getAsJsonArray()) {

                    JsonObject subscription = subscriptionElement.getAsJsonObject();
                    JsonArray offerattributes = subscription.get("offerattributes").getAsJsonObject().getAsJsonArray("attribute");

                    if (  offerattributes != null ){


                        String externalOfferId = subscription.get("externalofferid").getAsString();

                        boolean found = false;
                        String group = null;
                        for (JsonElement je : offerattributes) {
                            if (found == false) {
                                JsonObject jo = je.getAsJsonObject();
                                String name = jo.get("name").getAsString();
                                String value = jo.get("value").getAsString();
                                if (name.equals("DATA_OFFER_GROUP")) {
                                    group = value;
                                    found = true;
                                }
                            }
                        }

                        if (group != null) {

                            List offerList = new ArrayList();
                            if ( offerMap.containsKey(group) ){
                                offerList = (List) offerMap.get(group);
                            }

                            boolean added = false ;
                            for (JsonElement svc: subscription.getAsJsonObject().get("services").getAsJsonObject().get("service").getAsJsonArray()){
                                JsonObject service = svc.getAsJsonObject();
                                String externalServiceId = service.get("externalserviceid").getAsString();
                                if ( service.getAsJsonObject().getAsJsonObject("queries") != null ){
                                    for (JsonElement je : service.getAsJsonObject().getAsJsonObject("queries").getAsJsonArray("query")){
                                        JsonObject jo = je.getAsJsonObject();
                                        String queryid = jo.get("queryid").getAsString();
                                        if (queryid.equals("OFFER_LIST")){
                                            for (JsonElement b : $request.getLastResponse().getNodeResponse().get("balancequeryresponselist/servicequotas", JsonArray.class, null)){
                                                for (JsonElement be : b.getAsJsonObject().get("servicequota").getAsJsonArray()){
                                                    JsonObject bjo = be.getAsJsonObject();
                                                    String localExtSvcId = bjo.get("externalserviceid").getAsString();
                                                    if ( externalServiceId.equals(localExtSvcId) ){
                                                        if ( bjo.get("queryresults") != null ){
                                                            for (JsonElement qe : bjo.get("queryresults").getAsJsonObject().get("queryresult").getAsJsonArray()){
                                                                JsonObject qjo = qe.getAsJsonObject();
                                                                String localQueryId = qjo.get("queryid").getAsString() ;
                                                                if ( queryid.equals(localQueryId) ){
                                                                    String localQueryValue = qjo.get("value").getAsString();
                                                                    offerList.add(localQueryValue+"-"+externalOfferId);
                                                                    added = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if ( added ){
                                offerMap.put(group, offerList);
                            }
                        }
                    }
                }
            }


            List attributeList = $request.getNodeRequest().getAttributeList();
            /* List  attributeList = new ArrayList();
            attributeList.add(new Attribute("RENEWABLE_1","20150911141045")); */

            List newAttrList = new ArrayList();

            for (Object key : offerMap.keySet()) {
                boolean found = false;
                String group = (String)key;
                Attribute renewableAttribute = new Attribute("RENEWABLE_"+group,"");
                String renewableProductExpiry = null ;
                String renewableOfferId = null ;

                /* Find attribute returned from elg script */
                for (Object o : attributeList) {
                    Attribute a = (Attribute)o;
                    if (renewableProductExpiry == null) {
                        if (a.getName().equals("RENEWABLE_" + group)) {
                            String initialValue = a.getValue();
                            if ( initialValue.contains("-") ){
                                renewableProductExpiry = initialValue.split("-")[0];
                                renewableOfferId = initialValue.split("-")[1];
                            }
                        }
                    }
                }

                Date parsedRenewableProductExpiry = null ;
                if ( renewableProductExpiry != null && renewableProductExpiry.matches("([0-9]{14})") ){
                    parsedRenewableProductExpiry = sscmFormat.parse(renewableProductExpiry);
                }

                if ( parsedRenewableProductExpiry != null && renewableOfferId != null ){
                    List offerList = (List) offerMap.get(key);
                    String closestOffer = null;

                    for (Object offerObject : offerList){
                        String initalOfferString = (String)offerObject;

                        String offer = initalOfferString.split("-")[0];
                        String currentExternalOfferId = initalOfferString.split("-")[1];

                                                if (!offer.equalsIgnoreCase("NA")){
                                for (JsonElement oje : JsonUtil.convertToJson(offer).getAsJsonObject().get("offerlist").getAsJsonArray()){
                                    JsonObject ofo = oje.getAsJsonObject();
                                    String currentExpDate = ofo.get("expirydate").getAsString();

                                    Date parsedCurrent = null ;
                                    if ( currentExpDate.matches("([0-9]{14})") ){
                                        parsedCurrent = sscmFormat.parse(currentExpDate);
                                    }


                                    if ( parsedCurrent != null && currentExternalOfferId != null && currentExternalOfferId.equals(renewableOfferId) &&
                                            ( parsedCurrent.after(parsedRenewableProductExpiry) || parsedCurrent.equals(parsedRenewableProductExpiry) ) )
                                    {
                                        if ( closestOffer == null ){
                                            closestOffer = oje.toString();
                                        } else {
                                            String closestOfferExpireDate = JsonUtil.convertToJson(closestOffer).get("expirydate").getAsString();

                                            Date parsedClosest = null ;;
                                            if ( closestOfferExpireDate.matches("([0-9]{14})") ){
                                                parsedClosest = sscmFormat.parse(closestOfferExpireDate);
                                            }

                                            if ( parsedClosest != null && parsedCurrent.before(parsedClosest) ){
                                                closestOffer = oje.toString();
                                            }
                                        }
                                    }
                                }
                             }
                    }

                    if ( closestOffer != null ){
                        renewableAttribute.setValue(JsonUtil.convertToJson(closestOffer).toString());
                        found = true ;
                    }
                }

                if ( found ){
                    newAttrList.add(renewableAttribute);
                } else {
                    renewableAttribute.setValue("NA");
                    newAttrList.add(renewableAttribute);
                }
            }

            for (Object o : newAttrList){
                Attribute a = (Attribute)o;
                $request.getNodeRequest().addAttribute(a);
            }

    logger.debug("NextNodeIdentifier:{},NextNodeOperation:{} ",$request.getNextNodeIdentifier(), $request.getNextOperation());
end

rule "KorekImeiSubscriptionCreateRule"
dialect "java"
when
    $request : Request( nextNodeIdentifier == "SscmCoreService",
               nextOperation == "subscriptionCreateReserve" ,
               isTransformed ( "SscmCoreService" ,"subscriptionCreateReserve" ) == false )
    Request(  $request.getNodeRequest().getAttributeStartsWithName("INCOMING_MSISDN").isEmpty() == false )
then
    Attribute attr = $request.getNodeRequest().getAttributeByName("INCOMING_MSISDN");
    if( attr != null){

       String incomingMsisdn = attr.getValue();

       if ( incomingMsisdn.length() == 10 &&
                ( ( incomingMsisdn.substring(0, 3).equals("750") || incomingMsisdn.substring(0, 3).equals("751") || incomingMsisdn.substring(0, 3).equals("752") ) ) ){

            incomingMsisdn = "964"+incomingMsisdn;

        } else if ( incomingMsisdn.length() == 11 &&
                incomingMsisdn.substring(0, 1).equals("0") &&
                ( incomingMsisdn.substring(1, 4).equals("750") || incomingMsisdn.substring(1, 4).equals("751") || incomingMsisdn.substring(1, 4).equals("752"))){

            incomingMsisdn = "964"+incomingMsisdn.substring(1,incomingMsisdn.length() );

        } else if ( incomingMsisdn.length() == 13 &&
                incomingMsisdn.substring(0, 3).equals("964") &&
                (incomingMsisdn.substring(3, 6).equals("750") || incomingMsisdn.substring(3, 6).equals("751") || incomingMsisdn.substring(3, 6).equals("752"))) {

        } else {
            $request.setNextOperation("Finish");
            throw new BusinessException(500200,"Incoming MSISDN is not a valid Korek number: "+attr.getValue());

       }

        $request.getNodeRequest().add( "receiverMsisdn" , incomingMsisdn );
        logger.error("Ilker set payer to "+$request.getNodeRequest().get("msisdn"));
        $request.getNodeRequest().add( "payerMsisdn" , $request.getNodeRequest().get("msisdn") );
        logger.error("Ilker payer is set to "+$request.getNodeRequest().get("payerMsisdn"));
    }
end

rule "KorekStopRenewalSubscriptionCreateTranform"
	when
        $request : Request( nextNodeIdentifier == "SscmCoreService",
                            nextOperation == "subscriptionCreateReserve" ,
                            isTransformed ( "SscmCoreService" ,"subscriptionCreateReserve" ) == false )
        Request(  $request.getNodeRequest().getAttributeStartsWithName("STOP_RENEWAL_OFFERID").isEmpty() == false )
        Request(  $request.getNodeRequest().getAttributeStartsWithName("STOP_RENEWAL_CAMPAIGNID").isEmpty() == false )
    then
        /*Add fulfillOnReserve from request attributes if exists*/
        Attribute stopRenewalOfferId = $request.getNodeRequest().getAttributeByName("STOP_RENEWAL_OFFERID");
        Attribute stopRenewalCampaignId = $request.getNodeRequest().getAttributeByName("STOP_RENEWAL_CAMPAIGNID");

        if ( stopRenewalOfferId.getValue() != null && stopRenewalCampaignId.getValue() != null  ){
            $request.getNodeRequest().add( "esdpOfferId" , stopRenewalOfferId.getValue() );
            $request.getNodeRequest().add( "externalOfferId" , "" );
            $request.getNodeRequest().add( "externalSubscriptionId" , "" );
            $request.getNodeRequest().add( "campaignId" , stopRenewalCampaignId.getValue() );
            $request.getNodeRequest().add( "fulfillOnReserve" , "0" );
            $request.getNodeRequest().add( "initialChargeOption" , "1" );
            $request.getNodeRequest().add( "initialChargedAmount" , 0.0d );

            $request.getNodeRequest().addAttribute(new Attribute("SELECTION_DATE",null,ActionType.DELETED,null));
        }
end

/*Add destinationNumber*/
rule "ContentProviderTransformRule"
        when
        $request : Request( nextNodeIdentifier == "KorekContentProviderService",
                            isTransformed ( "KorekContentProviderService" ) == false )
    then
        Attribute serviceId = $request.getNodeRequest().getAttributeByName("CP_SERVICE_ID");
        Attribute subServiceId = $request.getNodeRequest().getAttributeByName("CP_SUB_SERVICE_ID");
        Attribute chargingFlag = $request.getNodeRequest().getAttributeByName("CP_CHARING_FLAG");
        Attribute notificationFlag = $request.getNodeRequest().getAttributeByName("CP_NOTIFICATION_FLAG");
        Attribute languageId = $request.getNodeRequest().getAttributeByName("CP_LANGUAGE");
        Attribute duration = $request.getNodeRequest().getAttributeByName("CP_DURATION");
        if ( serviceId != null ){
            $request.getNodeRequest().add("cpServiceId",serviceId.getValue());
        }
        if ( subServiceId != null ){
            $request.getNodeRequest().add("cpSubServiceId",subServiceId.getValue());
        }
        if ( chargingFlag != null ){
            Boolean cf = false ;
            if ( chargingFlag.getValue().equals("true") ){
                cf = true ;
            }
            $request.getNodeRequest().add("cpChargingFlag",cf);
        }
        if ( notificationFlag != null ){
            Boolean nf = false ;
            if ( notificationFlag.getValue().equals("true") ){
                nf = true ;
            }
            $request.getNodeRequest().add("cpNotificationFlag",nf);
        }
        if ( languageId != null ){
            $request.getNodeRequest().add("cpLanguageId",new BigInteger(languageId.getValue()));
        }
        if ( duration != null ){
            $request.getNodeRequest().add("cpDuration",new BigInteger(duration.getValue()));
        }

end

/* SMPP as provisioning*/
rule "SmppProvisionTransformRule"
        when
        $request : Request( nextNodeIdentifier == "SscmSmsService", isTransformed ( "sendSmsMessage" ) == false )
        Request(  $request.getNodeRequest().getAttributeStartsWithName("SMPP_").isEmpty() == false )
    then
        Attribute smppContent = $request.getNodeRequest().getAttributeByName("SMPP_CONTENT");
        Attribute smppLanguage = $request.getNodeRequest().getAttributeByName("SMPP_LANGUAGE");
        Attribute smppOriginationName = $request.getNodeRequest().getAttributeByName("SMPP_ORIGINATION_NAME");
        Attribute smppShortCode = $request.getNodeRequest().getAttributeByName("SMPP_SHORT_CODE");

        if ( smppContent != null ){
            $request.getNodeRequest().add("content",smppContent.getValue());
        }
        if ( smppLanguage != null ){
            $request.getNodeRequest().add("language",smppLanguage.getValue());
        }
        if ( smppOriginationName != null ){
            $request.getNodeRequest().add("originationName",smppOriginationName.getValue());
        }
        if ( smppShortCode != null ){
            $request.getNodeRequest().add("shortCode",smppShortCode.getValue());
        }

        String msisdn = (String) $request.getNodeRequest().get(CommonConstants.MSISDN);
        $request.getNodeRequest().add(CommonConstants.RECEIVER_MSISDN, msisdn);

end

rule "transform_updateServiceClass"
    when
        $request : Request( nextNodeIdentifier == "SscmAirService",
                            nextOperation == "updateForNewServiceClass" ,
                            isTransformed ( "SscmAirService" ,"updateForNewServiceClass" ) == false )
    then
        String fulfillReason = (String)$request.getNodeRequest().get("FULFILL_REASON");
        Attribute sc = $request.getNodeRequest().getAttributeByName("SC_NEW_DEPROV");
        if (fulfillReason.equals("PROV")) {
            sc = $request.getNodeRequest().getAttributeByName("SC");
        }
        $request.getNodeRequest().add("SC_NEW",sc.getValue());
        logger.info("SC_NEW: "+sc.getValue());
end