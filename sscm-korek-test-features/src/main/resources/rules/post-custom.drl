package com.ericsson.sscm.esb.rules;


import com.ericsson.sscm.esb.model.data.Attribute;
import com.ericsson.sscm.esb.model.data.Request;
import com.ericsson.sscm.esb.model.data.StatusValue;
import com.ericsson.sscm.esb.constants.AirInternalConstants;

import com.ericsson.sscm.esb.model.data.AbstractInOut;
import com.ericsson.sscm.esb.constants.CommonConstants;
import com.ericsson.sscm.esb.model.data.Response;
import com.ericsson.sscm.esb.model.data.NodeResponse;
import com.ericsson.sscm.esb.model.data.Criteria;
import com.ericsson.sscm.esb.model.data.FulfillmentState;

import java.util.Date;
import java.util.Calendar;
import java.util.Properties;

global org.slf4j.Logger logger;

rule "KorekFaFPostRule"
dialect "java"
    when
        $request : Request(
            flowName == "subscriptionCreate",
            nextNodeIdentifier == "CustomKorekOutboundService",
            isLastOperation("checkActiveSubscriptionForFaF") == true )
    then
        List<Attribute> fafList = $request.getNodeRequest().getList("/fafList", Attribute.class, null);
        if ( null != fafList ){
            logger.info("Faf list size is {}", fafList.size());
            if ( !fafList.isEmpty() ){
                for (Attribute attribute: fafList){
                    $request.getNodeRequest().addAttribute(attribute);
                }
            }
        }
        $request.getNodeRequest().removeFromAttributes("DESTINATION_NUMBER");

end

/* After getOffers check if REFILL_DEFAULT_OFFER_ID is response
   - Yes : visit deleteOffer before sending rollback
   - No  : nothing
*/
rule "KorekRefillWithNonMPOfferPostGetOffers"
	when
        $request : Request( nextNodeIdentifier == "SscmAirService",
                            flowName == "fulfillService",
                            isLastOperation("getOffers") == true )
	Request( ($request.getNodeRequest().getAttributeByName("REFILL_ROLLBACK_ENABLED") != null) == true )
	Request( ($request.getNodeRequest().getAttributeByName("REFILL_DEFAULT_OFFER_ID") != null) == true )
    then

        List<Integer> offerList = $request.getLastResponse().getNodeResponse().getList("offerinformationlist/offerid", Integer.class, null);
        logger.debug("KorekRefillWithNonMPOfferPostGetOffers entered");

        boolean shouldVisitDelete = false;
        if ( offerList != null ){
            Integer defaultOfferId = Integer.valueOf($request.getNodeRequest().getAttributeByName("REFILL_DEFAULT_OFFER_ID").getValue());
            for (int offerId : offerList ){
                if ( defaultOfferId == offerId ){
                    Attribute attribute = new Attribute("KOREK_BASRA_DELETE",1);
                    $request.getNodeRequest().addAttribute(attribute);
                    shouldVisitDelete = true;
                    logger.debug("KorekRefillWithNonMPOfferPostGetOffers match offerId {}",defaultOfferId);
                }
            }
        }

        /* If flow is not not visit deleteOffer, need to delete manually put OFFER_ID attr.  */
        if ( shouldVisitDelete == false ){
            logger.debug("KorekRefillWithNonMPOfferPostGetOffers delete OFFER_ID");
            Attribute attribute = $request.getNodeRequest().getAttributeByName("OFFER_ID");
            if ( attribute != null ){
                $request.getNodeRequest().removeFromAttributes("OFFER_ID");
            }
        }


end


/* After getOffers check if REFILL_DEFAULT_OFFER_ID is response
   - Yes : visit deleteOffer before sending rollback
   - No  : nothing
*/
rule "KorekRefillWithNonMPOfferPostDeleteOfferDuringProv"
	when
        $request : Request( nextNodeIdentifier == "SscmAirService",
                            flowName == "fulfillService",
                            isLastOperation("deleteOffer") == true )
	Request( $request.getNodeRequest().getAttributeStartsWithName("REFILL_ID").isEmpty() == false)
	Request( ($request.getNodeRequest().getAttributeByName("REFILL_ROLLBACK_ENABLED") != null) == true )
	Request( ($request.getNodeRequest().getAttributeByName("REFILL_DEFAULT_OFFER_ID") != null) == true )
	Request( ($request.getNodeRequest().getAttributeByName("KOREK_BASRA_DELETE") != null) == true )
	Request( $request.getNodeRequest().get("FULFILL_REASON").equals("PROV")  == true)
    then

        /* Flow visited deleteOffer, need to delete manually put Attribute attribute = $request.getNodeRequest().getAttributeByName("OFFER_ID attr.  */

        Attribute attribute = $request.getNodeRequest().getAttributeByName("OFFER_ID");
        logger.debug("KorekRefillWithNonMPOfferPostDeleteOfferDuringProv entered");

        if ( attribute != null ){
            $request.getNodeRequest().removeFromAttributes("OFFER_ID");
        }


end

function JsonObject generateMultipleOfferElement(String offerId,String productId,int status){
	JsonObject retObject = new JsonObject();
	retObject.addProperty("offerId", offerId);
	if (productId != null){
		retObject.addProperty("productId", Integer.valueOf(productId));
	}
	retObject.addProperty("status", status);
	return retObject;
}

/* After Refill find and store REFILL_AFFECTED_OFFER_ID_LIST,REFILL_AFFECTED_PRODUCT_ID_LIST attribute
if only REFILL_MULTI_PURCHASE_ROLLBACK_ENABLED attr is set AND difference will be multiple offerId and productId*/
rule "KorekRefillWithMPOfferPostRefill"
	when
        $request : Request( nextNodeIdentifier == "SscmAirService",
                            flowName == "fulfillService",
                            isLastOperation("refillVoucherless") == true )
    Request( ($request.getNodeRequest().getAttributeByName("MULTIPLE_OFFER_PURCHASE_ENABLED") != null) == true )
	Request( ($request.getNodeRequest().getAttributeByName("REFILL_ROLLBACK_ENABLED") != null) == true )
    then
		logger.debug("KorekRefillWithMPOfferPostRefill entered1");
		
        List<Integer> productListAfter = $request.getLastResponse().getNodeResponse().getList("accountAfterRefill/offerinformationlist/productid", Integer.class, null);
        List<Integer> offerListAfter = $request.getLastResponse().getNodeResponse().getList("accountAfterRefill/offerinformationlist/offerid", Integer.class, null);
        
        List<Integer> productListBefore = $request.getLastResponse().getNodeResponse().getList("accountBeforeRefill/offerinformationlist/productid", Integer.class, null);
        List<Integer> offerListBefore = $request.getLastResponse().getNodeResponse().getList("accountBeforeRefill/offerinformationlist/offerid", Integer.class, null);
        
        boolean productSensitivity = true;
        if ( offerListAfter != null && offerListBefore != null 
        		&& productListAfter != null && productListBefore != null){
	    	    		
        	List<String> offerProductPairListBefore = new ArrayList(); 
	        for(int i=0;i < productListBefore.size();i++ ){
	        	offerProductPairListBefore.add(offerListBefore.get(i) + "_" + productListBefore.get(i));
	        }
	        
	        List<String> offerProductPairListAfter = new ArrayList(); 
	        for(int i=0;i < productListAfter.size();i++ ){
	        	offerProductPairListAfter.add(offerListAfter.get(i) + "_" + productListAfter.get(i));
	        }
		        	
            for (String pairBefore : offerProductPairListBefore ){
            	offerProductPairListAfter.remove(pairBefore);
            } 
            logger.debug("Delta offer and product count is {}", offerProductPairListAfter.size());          
            JsonArray retJsonArray = new JsonArray();
            for (String pairAfter : offerProductPairListAfter){
            	boolean matchOfferLevel = false;
            	String offer = pairAfter.split("_")[0];
            	String product = pairAfter.split("_")[1];
            	for (String pairBefore : offerProductPairListBefore ){
            		if (!matchOfferLevel && pairBefore.startsWith(offer + "_") ){
	                	matchOfferLevel = true ;  
	                }
            	}
            	if (productSensitivity || matchOfferLevel){
            		JsonObject jsonObject = generateMultipleOfferElement(offer, product,0);
            		retJsonArray.add(jsonObject);
            		logger.debug("{} is added to deltaProductList",jsonObject.toString());
	           	} else {
	           		JsonObject jsonObject = generateMultipleOfferElement(offer, null,0);
	           		retJsonArray.add(jsonObject);
	           		logger.debug("{} is added to deltaOfferList",jsonObject.toString());
            	}
            }
            if (retJsonArray.size() > 0 ){
            	Attribute attribute = new Attribute("RESP_ATTR_REFILL_AFFECTED_OFFER_ID_LIST",retJsonArray.toString());
            	logger.debug("RESP_ATTR_REFILL_AFFECTED_OFFER_ID_LIST is set with value of {}" , retJsonArray.toString());
	            $request.getNodeRequest().addAttribute(attribute);
            }
        } else {
        	logger.debug("No After and Before list returned from RefillVoucherless process");
        }
        
	        
	    if ($request.getNodeRequest().getAttributeByName("RESP_ATTR_REFILL_AFFECTED_OFFER_ID_LIST") == null) {
        	 Attribute defaultAttr = $request.getNodeRequest().getAttributeByName("REFILL_DEFAULT_OFFER_ID_LIST");
	         if ( defaultAttr != null ){
        		String[] offerArray = defaultAttr.getValue().split(",");
        		JsonArray retJsonArray = new JsonArray();
				for (String offer : offerArray){
        			retJsonArray.add(generateMultipleOfferElement(offer,null,0))	
     			}   
	         	Attribute attribute = new Attribute("RESP_ATTR_REFILL_AFFECTED_OFFER_ID_LIST",retJsonArray.toString());
	         	logger.debug("RESP_ATTR_REFILL_AFFECTED_OFFER_ID_LIST is set with the default value of {}" , retJsonArray.toString());
		        $request.getNodeRequest().addAttribute(attribute);
	         }
        }
end


/* After Refill find and store REFILL_AFFECTED_OFFER_ID attribute
if only REFILL_ROLLBACK_ENABLED attr is set AND difference is exactly one offerId */
rule "KorekRefillWithNonMPOfferPostRefill"
	when
        $request : Request( nextNodeIdentifier == "SscmAirService",
                            flowName == "fulfillService",
                            isLastOperation("refillVoucherless") == true )
    Request( ($request.getNodeRequest().getAttributeByName("MULTIPLE_OFFER_PURCHASE_ENABLED") != null) == false )
	Request( ($request.getNodeRequest().getAttributeByName("REFILL_ROLLBACK_ENABLED") != null) == true )
    then

        List<Integer> offerListAfter = $request.getLastResponse().getNodeResponse().getList("accountAfterRefill/offerinformationlist/offerid", Integer.class, null);
        List<Integer> offerListBefore = $request.getLastResponse().getNodeResponse().getList("accountBeforeRefill/offerinformationlist/offerid", Integer.class, null);

        logger.debug("KorekRefillWithNonMPOfferPostRefill entered");

        boolean match = true;
        if ( offerListAfter != null && offerListBefore != null ){
            for (int offerId : offerListBefore ){
                if ( !offerListAfter.contains(offerId) ){
                    match = false ;  // Every offer in beforeList should be included in afterList
                    logger.debug("KorekRefillWithNonMPOfferPostRefill no match");
                } else {
                    offerListAfter.remove((Object)offerId); // Remove offers from after, so that 1 should be left
                }
            }

            if ( match && offerListAfter.size() == 1 ){
                logger.debug("KorekRefillWithNonMPOfferPostRefill add REFILL_AFFECTED_OFFER_ID =  {} to response attribute",offerListAfter.get(0));
                Attribute attribute = new Attribute("RESP_ATTR_REFILL_AFFECTED_OFFER_ID",offerListAfter.get(0));
                $request.getNodeRequest().addAttribute(attribute);
            } else {
                match = false;
            }
        } else {
            match = false;
        }

        if ( match == false ) {
            // Use default offer id for Basra
            Attribute default = $request.getNodeRequest().getAttributeByName("REFILL_DEFAULT_OFFER_ID");
            if ( default != null ){
                Attribute attribute = new Attribute("RESP_ATTR_REFILL_AFFECTED_OFFER_ID",default.getValue());
                $request.getNodeRequest().addAttribute(attribute);
            }
        }

end

/* Custom fulfillment flow post process rule for refill rollback case
 if REFILL_ROLLBACK_ENABLED is AND deleteOffer is visited
  instead finish the flow*/
rule "KorekRefillWithMPOfferPostDeleteOnCompansate"
    when
        $request : Request( flowName == "fulfillService", isVisited ( "SscmAirService" , "deleteOffer") == true )
        Request( $request.getNodeRequest().getAttributeStartsWithName("REFILL_ID").isEmpty() == false)
        Request( ($request.getNodeRequest().getAttributeByName("MULTIPLE_OFFER_PURCHASE_ENABLED") != null) == true )
        Request( ($request.getNodeRequest().getAttributeByName("REFILL_ROLLBACK_ENABLED") != null) == true )
        Request( $request.getNodeRequest().get("FULFILL_REASON").equals("DEPROV")  == true)
    then
    	String offerId = $request.getNodeRequest().getAttributeByName("OFFER_ID").getValue();
		Integer productIdAsInt = (Integer) $request.getNodeRequest().get("OFFER_PRODUCT_ID");
		logger.debug("offerId:" + offerId);
		String productId = null;
		if (productIdAsInt != null){
			productId = productIdAsInt.toString();
		}
		logger.debug("productId:" + productId);
			
		Attribute offerJson = $request.getNodeRequest().getAttributeByName("REFILL_AFFECTED_OFFER_ID_LIST");
		logger.debug("REFILL_AFFECTED_OFFER_ID_LIST attribute value = {} " , offerJson);
		JsonArray jsonArray = JsonUtil.convertToJsonArray(offerJson.getValue());;
		JsonArray retJsonArray = new JsonArray();
		for (JsonElement jsonElement : jsonArray){
			JsonObject jsonObject = jsonElement.getAsJsonObject();
			String tempOfferId = jsonObject.get("offerId").getAsString();
			String tempProductId = null;
			if (jsonObject.get("productId") != null){
				tempProductId = String.valueOf(jsonObject.get("productId").getAsInt());
			}
			int status = jsonObject.get("status").getAsInt();
			if (tempOfferId.equals(offerId) ){
				if (productId == null){
					logger.debug("Offer level matching for offer:{} and product:{}" , tempOfferId, tempProductId);
					retJsonArray.add(generateMultipleOfferElement(tempOfferId, tempProductId,1));
				}else if (productId != null && productId.equals(tempProductId)) {
					logger.debug("Product level matching for offer:{} and product:{}" , tempOfferId, tempProductId);
					retJsonArray.add(generateMultipleOfferElement(tempOfferId, tempProductId, 1));
				}else {
					logger.debug("No Product level matching for offer:{} and product:{}" , tempOfferId, tempProductId);
					retJsonArray.add(generateMultipleOfferElement(tempOfferId, tempProductId, status));
				}
			}else {
				logger.debug("No Offer level matching for offer:{} and product:{}" , tempOfferId, tempProductId);
				retJsonArray.add(generateMultipleOfferElement(tempOfferId, tempProductId, status));
			}
			
		}
		boolean stillOpenStatus = false;
		for (JsonElement jsonElement : retJsonArray){
			JsonObject jsonObject = jsonElement.getAsJsonObject();
			int status = jsonObject.get("status").getAsInt();
			if (!stillOpenStatus && status == 0){
				stillOpenStatus = true;
			}
		}	
		logger.debug("stillOpenStatus:" + stillOpenStatus);
		Attribute attribute = new Attribute("RESP_ATTR_REFILL_AFFECTED_OFFER_ID_LIST",retJsonArray.toString());
		$request.getNodeRequest().addAttribute(attribute);
    	
		$request.setNextOperation(CommonConstants.FINISH);
        $request.setNextNodeIdentifier(CommonConstants.FINISH);
        $request.addNoMatchingResponse();
        if (stillOpenStatus){
	        logger.debug("There are still open status offer-product elements.");
		    $request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS_WITH_REPEAT);
        }

        logger.debug("NextNodeIdentifier:{},NextNodeOperation:{} ",$request.getNextNodeIdentifier(), $request.getNextOperation());

end

/* Custom fulfillment flow post process rule for refill rollback case
 if REFILL_ROLLBACK_ENABLED is AND deleteOffer is visited
  instead finish the flow*/
rule "KorekRefillWithNonMPOfferPostDeleteOnCompansate"
    when
        $request : Request( flowName == "fulfillService", isVisited ( "SscmAirService" , "deleteOffer") == true )
        Request( $request.getNodeRequest().getAttributeStartsWithName("REFILL_ID").isEmpty() == false)
        Request( ($request.getNodeRequest().getAttributeByName("MULTIPLE_OFFER_PURCHASE_ENABLED") != null) == false )
        Request( ($request.getNodeRequest().getAttributeByName("REFILL_ROLLBACK_ENABLED") != null) == true )
        Request( $request.getNodeRequest().get("FULFILL_REASON").equals("DEPROV")  == true)
    then
        $request.setNextOperation(CommonConstants.FINISH);
        $request.setNextNodeIdentifier(CommonConstants.FINISH);
        $request.addNoMatchingResponse();

        logger.debug("NextNodeIdentifier:{},NextNodeOperation:{} ",$request.getNextNodeIdentifier(), $request.getNextOperation());

end

/*
   Custom Retrieve Subscriptions Post rule for Korek derived from base cause base rule wont be triggered.
*/
rule "KorekDataPostRetrieveEligibilityProfiles"
    when
        $request : Request(
            flowName == "retrieveSubscriptions",
            nextNodeIdentifier == "SscmCoreService",
            isLastOperation("retrieveEligibilityProfiles") == true  )
    then

        $request.getNodeRequest().remove(CommonConstants.ELIGIBILITY_EXISTS);
        $request.getNodeRequest().add("JS_OVERRIDE_BEHAVIOUR","CONTINUE");
        $request.getNodeRequest().add("KorekRetrieveEligibilityFinished",true);

        logger.debug("NextNodeIdentifier:{},NextNodeOperation:{} ",$request.getNextNodeIdentifier(), $request.getNextOperation());
    end



/* Provisioning service fulfillment rule for updateDataOfferSelection */
rule "post_updateDataOfferSelectionOrRetrieve"
    when
    	$request : Request(flowName == "fulfillService" )
    	Request((isLastOperation ("CustomKorekOutboundService", "updateDataOfferSelection") == true) ||
    	            (isLastOperation ("CustomKorekOutboundService", "updateDataOfferSelectionRetrieve") == true) ||
    	             (isLastOperation ("CustomKorekOutboundService", "removeDataOfferSelection") == true))
        Request($request.getNodeRequest().getAttributeStartsWithName("UPDATE_DATA_SELECTION").isEmpty() == false)
    then
        Attribute state = $request.getNodeRequest().getAttributeByName("UPDATE_DATA_SELECTION_STATE");
        if ( state != null ){

			boolean found = false ;

            List<FulfillmentState> fsList = FulfillmentState.convertJsonToList(state.getValue());

            for(int i = 0; i < fsList.size() ; i++){
                if (!found && fsList.get(i).getStatus().equals("0")){
                    found = true;
                }
            }

			if (found && $request.getLastResponse().getNodeResponse().getStatus().equals( StatusValue.SUCCESS ) ){
			    $request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS_WITH_REPEAT);
			}
			$request.getNodeRequest().addAttribute( new Attribute("RESP_ATTR_UPDATE_DATA_SELECTION_STATE" , state.getValue().replaceAll("\\s","");) );

        }
end


/* Provisioning service fulfillment rule for updateDataOfferSelection */
rule "post_updateDataOfferSelectionGetOffers"
    when
    	$request : Request(flowName == "fulfillService", isLastOperation ("getOffers") == true )
        Request($request.getNodeRequest().getAttributeStartsWithName("UPDATE_DATA_SELECTION").isEmpty() == false)
    then


        Attribute state = $request.getNodeRequest().getAttributeByName("UPDATE_DATA_SELECTION_STATE");
        Attribute sharedOffers = $request.getNodeRequest().getAttributeByName("UPDATE_DATA_SELECTION_SHARED_OFFERS");


        if ( $request.getLastResponse().getNodeResponse().getStatus().equals( StatusValue.SUCCESS ) &&
             state != null &&  sharedOffers != null){


            String [] sharedOffersArray = sharedOffers.getValue().split(",");
            List<String> offerList = $request.getLastResponse().getNodeResponse().getList("offerinformationlist/offerid", String.class, null);

            boolean shared = false;

            for(String responseOffer: offerList){
                if (shared != true){
                    for (String sharedOffer: sharedOffersArray){
                        if ( shared != true && sharedOffer.equals(responseOffer) ){
                            shared = true;
                        }
                    }
                }
            }

            List<FulfillmentState> fsList = FulfillmentState.convertJsonToList(state.getValue());

            for(int i = 0; i < fsList.size() ; i++){
                if (fsList.get(i).getAction().equals("getoffers")){
                    fsList.get(i).setStatus("1");
                }
            }

            String fsListJsonString = JsonUtil.toJsonString(fsList);

            $request.getNodeRequest().addAttribute(new Attribute("UPDATE_DATA_SELECTION_STATE",fsListJsonString));


            if ( shared == true ){
                /* There exists a shared offer, dont set selection*/
                $request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS);
                $request.getNodeRequest().add("STATE_CHANGED",true);

            } else {
                /* We have no shared offer, need to do a select now as next op.*/
                JsonArray jsonArray = JsonUtil.convertToJsonArray(state.getValue());

                jsonObject = null;
                found = false ;

                for(int i = 0; i < jsonArray.size() ; i++){
                    jsonObject = jsonArray.get(i).getAsJsonObject();
                    if (jsonObject.get("status").getAsString().equals("0")){
                        found = true;
                    }
                }

                if (found){
                    $request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS_WITH_REPEAT);
                } else{
                    $request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS);
                }

            }

            $request.getNodeRequest().addAttribute( new Attribute("RESP_ATTR_UPDATE_DATA_SELECTION_STATE" , fsListJsonString.replaceAll("\\s","");) );

        }
end


/*
    Shared account will be removed, seach is done. Put the returning list of DIRNUM's to a list parameter, so that
    they can be removed one by one.
*/
rule "postFulfillCancelSharedAccountSearchParticipants"
    when
        $request : Request( $request.isLastOperation("SscmBscsService","contractSharedAccountParticipantsSearch") == true )
        Request( $request.getNodeRequest().getAttributeByName("SHARED_ACCOUNT_PACKAGE_ID") != null)
//        Request( $request.getNodeRequest().get("FULFILL_REASON").equals("DEPROV") == true )
//        Request ( getTerminationReasons().contains($request.getNodeRequest().get("fulfillmentreason")) )
    then
        String owner = (String)$request.getNodeRequest().get("msisdn");
        JsonObject jObject = JsonUtil.convertToJson($request.getLastResponse().getNodeResponse().get("originalMessage").toString());
        JsonArray array = jObject.get("CONTRACT_SHARED_ACCOUNT_PARTICIPANTS").getAsJsonArray();
        $request.getNodeRequest().add("contractSharedAccountParticipants",array.toString());
           

end



rule "postDoActionSuccessWithRepeat"
    when
        $request : Request(flowName == "fulfillService", isVisited ( "CustomKorekOutboundService" , "doSharedAccountAction") == true )
        Request( $request.getNodeRequest().getAttributeByName("SHARED_ACCOUNT_PACKAGE_ID") != null)
        Request($request.getNodeRequest().getAttributeByName("PROVISION_LIST") != null)
        Request( $request.getNodeRequest().get("sharedFulfillStatus") != null && $request.getNodeRequest().get("sharedFulfillStatus") == 2 )
    then
        Attribute attr = $request.getNodeRequest().getAttributeByName("PROVISION_LIST");
		$request.setNextOperation(CommonConstants.FINISH);
        $request.setNextNodeIdentifier(CommonConstants.FINISH);
        Attribute attribute = new Attribute("RESP_ATTR_PROVISION_LIST",attr.getValue());
        $request.getNodeRequest().addAttribute(attribute);


		Attribute roll = $request.getNodeRequest().getAttributeByName("ROLLBACK_STARTED");
		if ( roll != null && "true".equals(roll.getValue())){
		    Attribute rollReturn = new Attribute("RESP_ATTR_ROLLBACK_STARTED",roll.getValue());
		    $request.getNodeRequest().addAttribute(rollReturn);
        }
		$request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS_WITH_REPEAT);
end



rule "postDoActionSuccessFinished"
    when
        $request : Request(flowName == "fulfillService", isVisited ( "CustomKorekOutboundService" , "doSharedAccountAction") == true )
        Request( $request.getNodeRequest().getAttributeByName("SHARED_ACCOUNT_PACKAGE_ID") != null)
        Request($request.getNodeRequest().getAttributeByName("PROVISION_LIST") != null)
        Request( $request.getNodeRequest().get("sharedFulfillStatus") != null && $request.getNodeRequest().get("sharedFulfillStatus") == 3 )
    then
        Attribute attr = $request.getNodeRequest().getAttributeByName("PROVISION_LIST");
		$request.setNextOperation(CommonConstants.FINISH);
        $request.setNextNodeIdentifier(CommonConstants.FINISH);
        Attribute attribute = new Attribute("RESP_ATTR_PROVISION_LIST",attr.getValue());
        $request.getNodeRequest().addAttribute(attribute);
        
        if($request.getNodeRequest().get("FULFILL_REASON").equals("DEROV") == true 
                && getTerminationReasons().contains($request.getNodeRequest().get("fulfillmentreason")) == true ){
                    Attribute shared_attr = $request.getNodeRequest().getAttributeByName("SHARED_LIST");
                    Attribute attribute = new Attribute("RESP_ATTR_SHARED_LIST",shared_attr.getValue());
                    $request.getNodeRequest().addAttribute(attribute);
        }
        

		Attribute roll = $request.getNodeRequest().getAttributeByName("ROLLBACK_STARTED");
        if ( roll != null && "true".equals(roll.getValue())){
            Attribute rollReturn = new Attribute("RESP_ATTR_ROLLBACK_STARTED",roll.getValue());
            $request.getNodeRequest().addAttribute(rollReturn);
        }
        $request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS);
end


/* If there was SMS processed , put updated SHARED_LIST into nodeRequest so that it gets updated. */
rule "post_sharedParticipantSms"
    when
    	$request : Request(flowName == "fulfillService", isLastOperation ("sharedParticipantSendSms") == true )
        Request($request.getNodeRequest().getAttributeStartsWithName("SEND_PARTICIPANT_SMS").isEmpty() == false)
        Request($request.getNodeRequest().getAttributeStartsWithName("SMS_PROCESSED").isEmpty() == false)
    then

        Attribute attr = $request.getNodeRequest().getAttributeByName("SHARED_LIST");
        Attribute attribute = new Attribute("RESP_ATTR_SHARED_LIST",attr.getValue());
        $request.getNodeRequest().addAttribute(attribute);
end

rule "post_autoShare"
    when
    	$request : Request(flowName == "fulfillService", isLastOperation ("shareOfferAutomatically") == true )
    then
        Attribute attr = $request.getNodeRequest().getAttributeByName("AS_STATUS");
        if(attr != null) {
            Attribute attribute = new Attribute("RESP_ATTR_AS_STATUS",attr.getValue());
            $request.getNodeRequest().addAttribute(attribute);
		}
        Attribute asRepeat =  $request.getNodeRequest().getAttributeByName("AS_REPEAT");

        if(asRepeat ==null || asRepeat.getValue().equals("true")) {
            $request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS_WITH_REPEAT);
        } else {
            $request.getLastResponse().getNodeResponse().setStatus(StatusValue.SUCCESS);
        }
       
end

rule "postKorekCancelAll"
    when
    	$request : Request(flowName == "subscriptionCreate", isLastOperation ("korekCancelMultipleOffers") == true )
    then
		$request.setNextOperation(CommonConstants.FINISH);
        $request.setNextNodeIdentifier(CommonConstants.FINISH);
end


